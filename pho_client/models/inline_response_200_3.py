# coding: utf-8

"""
    Social Graph API

    Pho Networks REST API

    OpenAPI spec version: 1.1.1
    Contact: emre@phonetworks.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2003(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, _from=None, to=None, _in=None, out=None):
        """
        InlineResponse2003 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            '_from': 'list[NodeEdge]',
            'to': 'list[NodeEdge]',
            '_in': 'list[InlineResponse2003In]',
            'out': 'list[InlineResponse2003In]'
        }

        self.attribute_map = {
            '_from': 'from',
            'to': 'to',
            '_in': 'in',
            'out': 'out'
        }

        self.__from = _from
        self._to = to
        self.__in = _in
        self._out = out


    @property
    def _from(self):
        """
        Gets the _from of this InlineResponse2003.


        :return: The _from of this InlineResponse2003.
        :rtype: list[NodeEdge]
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this InlineResponse2003.


        :param _from: The _from of this InlineResponse2003.
        :type: list[NodeEdge]
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this InlineResponse2003.


        :return: The to of this InlineResponse2003.
        :rtype: list[NodeEdge]
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this InlineResponse2003.


        :param to: The to of this InlineResponse2003.
        :type: list[NodeEdge]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def _in(self):
        """
        Gets the _in of this InlineResponse2003.


        :return: The _in of this InlineResponse2003.
        :rtype: list[InlineResponse2003In]
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """
        Sets the _in of this InlineResponse2003.


        :param _in: The _in of this InlineResponse2003.
        :type: list[InlineResponse2003In]
        """
        if _in is None:
            raise ValueError("Invalid value for `_in`, must not be `None`")

        self.__in = _in

    @property
    def out(self):
        """
        Gets the out of this InlineResponse2003.


        :return: The out of this InlineResponse2003.
        :rtype: list[InlineResponse2003In]
        """
        return self._out

    @out.setter
    def out(self, out):
        """
        Sets the out of this InlineResponse2003.


        :param out: The out of this InlineResponse2003.
        :type: list[InlineResponse2003In]
        """
        if out is None:
            raise ValueError("Invalid value for `out`, must not be `None`")

        self._out = out

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
